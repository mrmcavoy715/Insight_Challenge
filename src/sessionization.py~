'''
Init sessionization.py

Takes data from input/log.csv, streams and calculates user sessions
'''

import argparse
import datetime
from timeit import timeit


class logIterable(object):

    def __init__(self, parser):

        self.args = parser.parse_args()
        #print("input_path", self.args.input)
        #print("output path", self.args.output)
        # parameters
        # ip,date,time,zone,cik,accession,extention,code,size,idx,norefer,noagent,find,crawler,browser
        self.data = open(self.args.input)
        self.output = open(self.args.output, 'w')
        self.inactivity_period = int(open(self.args.period).readline())

        self.user_dict = {}
        self.del_user = set()
        self.max_users = 0
        
    def __iter__(self):

        #line = self.data.readline()
        #yield print(line.split(',')[0:2])
        pass

    def open_file(self):

        with open(self.args.input) as f:

            #previous_time = f.readline
            previous_time = datetime.datetime(2017, 1, 1, 0, 0)
            print("start_time", previous_time)

            for line in f:

                self.del_user = set()

                line_split = line.split(',')
                ip = line_split[0]
                date = line_split[1]
                time = line_split[2]

                if ip == 'ip':
                    continue

                # 2017-01-01 00:00:00
                current_time = datetime.datetime.strptime(date + ' ' + time, "%Y-%m-%d %H:%M:%S")

                # add a new user or returning user
                if ip not in self.user_dict:
                    self.user_dict[ip] = { 'start_time': current_time, 'end_time': current_time, 'count': 1 }
                    user_count = len(self.user_dict)

                    if user_count > self.max_users:
                        self.max_users = user_count
                    

                # remove user from delete list if they have had a previous session
                    if ip in self.del_user:
                        #self.del_user.remove(ip)
                        pass
                        
                # update users time and count if user is active
                else:
                    self.user_dict[ip]['end_time'] = current_time
                    self.user_dict[ip]['count'] += 1

                # if a second has passed, check elapsed time for all users
                if (current_time - previous_time).total_seconds() > 0:
                    #print("checking time", current_time)
                    previous_time = current_time

                    for user in self.user_dict:
                        #print("checking user", user)
                        time_delta = self.user_dict[user]['end_time'] - self.user_dict[user]['start_time']
                        time_delta = int(time_delta.total_seconds())

                        #print("time delta", time_delta)
                        if  time_delta > self.inactivity_period:
                            self.del_user.add(user)
                            output_line = user + ',' + self.user_dict[user]['start_time'].strftime("%Y-%m-%d %H:%M:%S") + ',' + self.user_dict[user]['end_time'].strftime("%Y-%m-%d %H:%M:%S") + ',' + str(time_delta) + ',' + str(self.user_dict[user]['count']) + '\n'
                            #print("ending session", output_line)
                            self.output.write(output_line)

                    for x in self.del_user:
                        #print("looking to delete", x)
                        del self.user_dict[x]
                
                
        #print("largest number of items in self.user_dict", self.max_users)

                    
    def close_file(self):

        self.data.close()
        self.output.close()


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description="""
    """, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("input", type=str, nargs='?',  help="Path to input data")
    parser.add_argument("period", type=str, nargs='?',  help="Path to input data")
    parser.add_argument("output", type=str, nargs='?', help="Path to output data")
    
    start = logIterable(parser)
    print(timeit(lambda: start.open_file(), number = 1))
    start.close_file()


    '''
    Three map reduces?
    First: map ip-second
    Second: ip
    Third: sort
    '''
